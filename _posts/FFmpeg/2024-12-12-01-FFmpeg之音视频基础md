---
layout: post
title: 一、FFmpeg——音视频基础
categories: FFmpeg
tags: [FFmpeg]
---

## 1 颜色空间

计算机中存储的任意类型图像都需要遵循一定的数据描述方式，这种描述方式被称为颜色空间。颜色空间类型非常多，我以下图为例详细讲解图像的颜色空间。

![alt text](image-2.png)

### 1.1 RGB颜色空间

对设计稍有了解的都会熟悉这种颜色空间，这种颜色空间是计算机屏幕显示的最直观的颜色空间。这种颜色空间的来源是因为，最初的物理科学家发现，通过红、绿、蓝光的不同强弱的组合几乎能表现出任意类型的光的颜色，所以后来计算机屏幕上每个像素点都会有这三种颜色的小灯，通过控制灯的强弱来制造出所有颜色。其中红色代表Red，绿色代表Green，蓝色代表Blue。

但这种方式有一个问题在于，一个像素点亮度从没有光到最亮，需要定义多少个颜色值呢？经过科学家反复测算，最终发现，定义256个值，可以表达16777216种颜色，能达到人类视觉的极限。所以现在的屏幕颜色及亮度均使用这种RGB24的方式来表达颜色。24代表取值24位，也就是每种颜色8位，分别取值为0-255。

下面我将RGB颜色给拆开：

![alt text](image-3.png)

由此可见，上图中红色区域在下图红色图片相同区域最亮；蓝色区域在下图蓝色图片相同区域最亮。绿色不太好对比，但可见黄色，这种颜色是通过红色和绿色组成，所以黄色区域在下图红色和绿色图片相同区域都比较亮。

一张 1280 * 720 大小的图片（每个像素点占用24bit），就占用 1280 * 720 * 3 / 1024 / 1024 = 2.63 MB 存储空间。

### 1.2 YUV颜色空间

这种颜色空间是视频格式的主要的颜色空间，与RGB一样，这种颜色空间也能表示任意颜色。这种颜色空间有非常多种标准，但无一例外均可以通过RGB颜色值的运算得到，可以把这种颜色空间与RGB的关系想象为这样：RGB为立体坐标系的xyz轴正方向向量，YUV为这个坐标系上三个不处在统一平面的三个向量，通过数学原理，YUV就能与RGB互相转换了。

这种颜色空间的标准有多种，我以YCbCr Rec.601标准来讲解。这种颜色空间的原理是，通过三种颜色分量，Y（luma，代表亮度），U（Chroma Blue，Cb，代表蓝色色度），V（Chroma Red，Cr，代表红色色度）三个分量来描述一个颜色。这种描述方式将绿色给去掉了，蓝色和红色分别表示冷色色调与暖色色调。

![alt text](image-4.png)

这张图估计很多人都会觉得，左边的图像最清晰，中间和右边图像不容易分辨。事实也是这样，人类一般对细节最敏感，但对冷色系和暖色系色调的分辨比较迟钝。

科学家于是想到了一种肉眼很难分辨出的压缩方式，也就是，原本Y，U，V分别一个值代表一个像素，现在两个Y或四个Y共用一个U和一个V。

目前最常用的压缩编码方式是四个Y共用一个U和一个V，这种编码方式相对于RGB来说节省了一半的存储空间。示例像素排列：

### 1.2.1 YUV采样格式

YUV 图像的主流采样方式有如下三种：

- YUV 4:4:4 采样

- YUV 4:2:2 采样

- YUV 4:2:0 采样

#### 1.2.1.1 YUV 4:4:4

YUV 4:4:4 采样，意味着 Y、U、V 三个分量的采样比例相同，因此在生成的图像里，每个像素的三个分量信息完整，都是 8 bit，也就是一个字节。

其中，Y 分量用叉表示，UV 分量用圆圈表示。

![alt text](image-5.png)

```
举个例子 ：
 
假如图像像素为：[Y0 U0 V0]、[Y1 U1 V1]、[Y2 U2 V2]、[Y3 U3 V3]
 
那么采样的码流为：Y0 U0 V0 Y1 U1 V1 Y2 U2 V2 Y3 U3 V3 
 
最后映射出的像素点依旧为 [Y0 U0 V0]、[Y1 U1 V1]、[Y2 U2 V2]、[Y3 U3 V3]
```

可以看到这种采样方式的图像和 RGB 颜色模型的图像大小是一样，并没有达到节省带宽的目的，当将 RGB 图像转换为 YUV 图像时，也是先转换为 YUV 4:4:4 采样的图像。

#### 1.2.1.2 YUV 4:2:2

YUV 4:2:2 采样，意味着 UV 分量是 Y 分量采样的一半，Y 分量和 UV 分量按照 2 : 1 的比例采样。如果水平方向有 10 个像素点，那么采样了 10 个 Y 分量，而只采样了 5 个 UV 分量。

其中，Y 分量用叉表示，UV 分量用圆圈表示。

![alt text](image-6.png)

```
举个例子 ：

假如图像像素为：[Y0 U0 V0]、[Y1 U1 V1]、[Y2 U2 V2]、[Y3 U3 V3]

那么采样的码流为：Y0 U0 Y1 V1 Y2 U2 Y3 V3 

其中，每采样过一个像素点，都会采样其 Y 分量，而 U、V 分量就会间隔一个采集一个。

最后映射出的像素点为 [Y0 U0 V1]、[Y1 U0 V1]、[Y2 U2 V3]、[Y3 U2 V3]
```

采样的码流映射为像素点，还是要满足每个像素点有 Y、U、V 三个分量。但是可以看到，第一和第二像素点公用了 U0、V1 分量，第三和第四个像素点公用了 U2、V3 分量，这样就节省了图像空间。

一张 1280 * 720 大小的图片，在 YUV 4:2:2 采样时的大小为：

（1280 * 720 * 8 + 1280 * 720 * 0.5 * 8 * 2）/ 8 / 1024 / 1024 = 1.76 MB

可以看到 YUV 4:2:2 采样的图像比 RGB 模型图像节省了三分之一的存储空间，在传输时占用的带宽也会随之减少。

#### 1.2.1.3 YUV 4:2:0

YUV 4:2:0 采样，并不是指只采样 U 分量而不采样 V 分量。而是指，在每一行扫描时，只扫描一种色度分量（U 或者 V），和 Y 分量按照 2 : 1 的方式采样。比如，第一行扫描时，YU 按照 2 : 1 的方式采样，那么第二行扫描时，YV 分量按照 2:1 的方式采样。对于每个色度分量来说，它的水平方向和竖直方向的采样和 Y 分量相比都是 2:1 。 

如下图所示（其中，Y 分量用叉表示，UV 分量用圆圈表示）：

![alt text](image-7.png)

假设第一行扫描了 U 分量，第二行扫描了 V 分量，那么需要扫描两行才能够组成完整的 UV 分量。

```
假设图像像素为：

[Y0 U0 V0]、[Y1 U1 V1]、 [Y2 U2 V2]、 [Y3 U3 V3]
[Y5 U5 V5]、[Y6 U6 V6]、 [Y7 U7 V7] 、[Y8 U8 V8]

那么采样的码流为：Y0 U0 Y1 Y2 U2 Y3 Y5 V5 Y6 Y7 V7 Y8

其中，每采样过一个像素点，都会采样其 Y 分量，而 U、V 分量就会间隔一行按照 2 : 1 进行采样。

最后映射出的像素点为：

[Y0 U0 V5]、[Y1 U0 V5]、[Y2 U2 V7]、[Y3 U2 V7]
[Y5 U0 V5]、[Y6 U0 V6]、[Y7 U2 V7]、[Y8 U2 V8]
```

从映射出的像素点中可以看到，四个 Y 分量是共用了一套 UV 分量，而且是按照 2*2 的小方格的形式分布的，相比 YUV 4:2:2 采样中两个 Y 分量共用一套 UV 分量，这样更能够节省空间。

一张 1280 * 720 大小的图片，在 YUV 4:2:0 采样时的大小为：

（1280 * 720 * 8 + 1280 * 720 * 0.25 * 8 * 2）/ 8 / 1024 / 1024 = 1.32 MB 。

可以看到 YUV 4:2:0 采样的图像比 RGB 模型图像节省了一半的存储空间，因此它也是比较主流的采样方式。


### 1.2.3 YUV存储格式

说完了采样，接下来就是如何把采样的数据存储起来。

YUV 的存储格式，有两种：

- planar（平面格式）：指先连续存储所有像素点的 Y 分量，然后存储 U 分量，最后是 V 分量。

- packed（打包模式）：指每个像素点的 Y、U、V 分量是连续交替存储的。

根据采样方式和存储格式的不同，就有了多种 YUV 格式。这些格式主要是基于 YUV 4:2:2 和 YUV 4:2:0 采样。





## 1 介绍

FFmpeg（Fast Forward MPEG）是一个开放源代码的自由软件，可以运行音频和视频多种格式的录影、转换、流功能。

## 1 Window配置

1. 打开FFmpeg网站：[https://www.ffmpeg.org/download.html#build-windows](https://www.ffmpeg.org/download.html#build-windows)

2. 点击 `Windows builds by BtbN` 下载编译好的程序和动态库。

    ![alt text](image-1.png)

3. 添加程序路径到系统环境变量PATH

    ![alt text](image.png)


https://www.fawdlstty.com/ffmpeg/docs/01_video_introduce.html#%E9%A2%9C%E8%89%B2%E7%A9%BA%E9%97%B4

https://juejin.cn/post/7094619578356989966

https://blog.csdn.net/Javachichi/article/details/131660999

https://www.zl-asica.com/2020/ffmpeg/

https://img.ly/blog/ultimate-guide-to-ffmpeg/